# Compile our java files in this container
FROM ubuntu:22.04 AS builder

# get and set graalvm-jdk-21
RUN apt-get update && apt-get install wget -y
RUN wget https://download.oracle.com/graalvm/21/latest/graalvm-jdk-21_linux-x64_bin.tar.gz && tar -xf graalvm-jdk-21_linux-x64_bin.tar.gz
ENV JAVA_HOME=./graalvm-jdk-21+35.1
RUN export JAVA_HOME

COPY . .

# compile app
# sharing a network repository seems like a good idea if you already have one, but the first load takes 180s~ and later 18s~, while not using it takes 27s~ (for java apps)
RUN mkdir ~/.m2 && echo "<settings> <mirrors> <mirror> <id>nexus</id> <mirrorOf>*</mirrorOf> <url>http://host.docker.internal:8081/repository/maven-public/</url> </mirror> </mirrors> </settings>" > ~/.m2/settings.xml
RUN apt-get install gcc zlib1g-dev -y
RUN sh mvnw -Pnative -Ppgo-instrument clean native:compile

ENV STRESS=true
ENV SPRING_DATA_MONGODB_URI=mongodb://mdb:27017/test
ENV SPRING_DATASOURCE_URL=jdbc:postgresql://pdb:5432/postgres
ENV SPRING_R2DBC_URL=r2dbc:postgresql://pdb:5432/postgres
RUN export STRESS
RUN export SPRING_DATA_MONGODB_URI
RUN export SPRING_DATASOURCE_URL
RUN export SPRING_R2DBC_URL

RUN ./target/${APP_NAME}_pgo-instrument --spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/postgres --spring.r2dbc.url=r2dbc:postgresql://host.docker.internal:5432/postgres --spring.data.mongodb.uri=mongodb://host.docker.internal:27017/test stress
RUN sh mvnw -Pnative -Ppgo clean native:compile

# the final container
FROM frolvlad/alpine-glibc:alpine-3.17
RUN apk --no-cache add curl
COPY --from=builder target/${APP_NAME}_pgo /usr/local/bin/app
ENTRYPOINT ["app"]